;; Analyzed by ClojureScript 0.0-3269
{:use-macros nil, :excludes #{}, :name cljsjs.util, :imports nil, :requires {r reagent.core, reagent.core reagent.core, s clojure.string, clojure.string clojure.string}, :uses nil, :defs {indexOf {:protocol-inline nil, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 25, :column 7, :end-line 25, :end-column 14, :arglists (quote ([v p]))}, :name cljsjs.util/indexOf, :variadic false, :file "src/cljs/cljsjs/util.cljs", :end-column 14, :method-params ([v p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v p]))}, deep-merge {:protocol-inline nil, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([& maps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name cljsjs.util/deep-merge, :variadic true, :file "src/cljs/cljsjs/util.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists ([& maps])}, gen-id {:protocol-inline nil, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 32, :column 7, :end-line 32, :end-column 13, :arglists (quote ([]))}, :name cljsjs.util/gen-id, :variadic false, :file "src/cljs/cljsjs/util.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reset-counter! {:protocol-inline nil, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 8, :column 7, :end-line 8, :end-column 21, :arglists (quote ([]))}, :name cljsjs.util/reset-counter!, :variadic false, :file "src/cljs/cljsjs/util.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, convert-props {:protocol-inline nil, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 51, :column 7, :end-line 51, :end-column 20, :arglists (quote ([a]))}, :name cljsjs.util/convert-props, :variadic false, :file "src/cljs/cljsjs/util.cljs", :end-column 20, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a]))}, deep-merge* {:protocol-inline nil, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 11, :column 7, :end-line 11, :end-column 18, :arglists (quote ([& maps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name cljsjs.util/deep-merge*, :variadic true, :file "src/cljs/cljsjs/util.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists ([& maps])}, map-children {:protocol-inline nil, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 40, :column 7, :end-line 40, :end-column 19, :arglists (quote ([func rchildren]))}, :name cljsjs.util/map-children, :variadic false, :file "src/cljs/cljsjs/util.cljs", :end-column 19, :method-params ([func rchildren]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([func rchildren]))}, debug {:protocol-inline nil, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 47, :column 7, :end-line 47, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljsjs.util/debug, :variadic true, :file "src/cljs/cljsjs/util.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, counter {:name cljsjs.util/counter, :file "src/cljs/cljsjs/util.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 6, :column 10, :end-line 6, :end-column 17}}, debug? {:name cljsjs.util/debug?, :file "src/cljs/cljsjs/util.cljs", :line 5, :column 1, :end-line 5, :end-column 16, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 5, :column 10, :end-line 5, :end-column 16}}, trim {:protocol-inline nil, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 62, :column 7, :end-line 62, :end-column 11, :arglists (quote ([st]))}, :name cljsjs.util/trim, :variadic false, :file "src/cljs/cljsjs/util.cljs", :end-column 11, :method-params ([st]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([st]))}, get-id {:protocol-inline nil, :meta {:file "/Users/shripadkrishna/projects/rubix/rubix-bootstrap/src/cljs/cljsjs/util.cljs", :line 35, :column 7, :end-line 35, :end-column 13, :arglists (quote ([this props]))}, :name cljsjs.util/get-id, :variadic false, :file "src/cljs/cljsjs/util.cljs", :end-column 13, :method-params ([this props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this props]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :className :for :id :class :htmlFor}, :order [:id :else :className :class :htmlFor :for]}, :doc nil}